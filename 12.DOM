<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>数据转HTML显示</title>
  </head>
  <body>
    <div id="box"></div>

    <script>
      const data = ['亮亮', '铭铭', '小新', '森森', '文华']
      // 希望把他们放在 button 标签里, 然后添加到页面

      // 数组高阶函数 - map 实现映射
      // const data_html = data.map((value, index, array) => {
      //   return `<button>${value}</button>`
      // })
      const data_html = data.map(v => `<button>${v}</button>`)
      console.log(data_html)

      // 数组的数据项, 拼接在一起变为字符串 -- join
      const data_str = data_html.join('') //默认参数是 逗号, 会用逗号进行间隔
      console.log(data_str)

      // 放到 box 元素中进行展示: 需要解析成HTML代码
      box.innerHTML = data_str
    </script>
  </body>
</html>

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>复杂的数据转换</title>
    <style>
      #cart {
        user-select: none;
        width: 600px;
      }
      #cart > div {
        display: flex;
        justify-content: space-between;
        padding: 10px;
        border: 1px solid gray;
        border-radius: 4px;
      }
      #cart > div.header {
        background-color: #eee;
      }
    </style>
  </head>
  <body>
    <div id="cart">
      <!-- 先写伪代码: 用假的数据先看效果 -->
      <div class="header">
        <span>商品名</span>
        <span>单价</span>
        <span>数量</span>
        <span>小计</span>
      </div>
    </div>

    <script>
      const data = [
        { name: '商品1', price: 9.9, count: 2 },
        { name: '商品2', price: 19.9, count: 10 },
        { name: '商品3', price: 29.9, count: 1 },
        { name: '商品4', price: 39.9, count: 6 },
      ]

      const data_html = data.map(v => {
        // 为了简化模板字符串中的代码, 利用解构语法 先把变量拿出来
        const { name, price, count } = v

        // 实际工作时, 模板字符串中的html代码会非常复杂
        // 推荐在 HTML 中书写(有代码提示), 然后在复制过来使用
        return `<div>
        <span>${name}</span>
        <span>¥${price}</span>
        <span>${count}</span>
        <span>¥${(price * count).toFixed(2)}</span>
      </div>`
      })

      // 累加拼接字符串: += ,   新增的内容 添加到 已有内容的后面
      cart.innerHTML += data_html.join('')
    </script>
  </body>
</html>

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>计数器升级</title>
  </head>
  <body>
    <div>
      <button>-</button>
      <span>5</span>
      <button>+</button>
    </div>

    <script>
      const btns = document.querySelectorAll('button')
      const span = document.querySelector('span')
      // previous: 上一个   Sibling:兄弟
      const btn_jian = span.previousElementSibling

      btns.forEach(value => {
        value.onclick = function () {
          if (this.innerText == '-') {
            span.innerHTML--
          }

          if (this.innerText == '+') {
            span.innerHTML++
          }

          // 如果数字是1,则减法按钮不可用, 否则可用
          // if (span.innerHTML == 1) {
          //   btn_jian.disabled = true // 不可用 == 真
          // } else {
          //   btn_jian.disabled = false //不可用 == 假
          // }

          // == 的结果就是 true/false;  没有必要判断 true  再 等于true, 多余
          btn_jian.disabled = span.innerHTML == 1
        }
      })
    </script>
  </body>
</html>

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>冒泡机制的应用</title>
  </head>
  <body>
    <!-- 事件委托: 子元素的事件 让父元素来处理 -->
    <!-- 委托的前提: 冒泡机制 -->
    <!-- 注意: 应该判断 是指定的子元素们 触发的事件 才处理 -->
    <!-- 使用场景: 以后如果需要 批量给子元素们添加事件监听,  则改为用父元素帮子元素事件事件监听 -->
    <!-- 明天: 动态新增的子元素,  用委托事件监听是最好的场景 -->
    <h2>请选择您支持的队伍: <b>???</b></h2>

    <div id="options">
      <button>WBG</button>
      <button>RNG</button>
      <button>BLG</button>
      <button>IG</button>
      <button>EDG</button>
    </div>

    <script>
      // 冒泡思路: 每个按钮点击后 都会把事件传递给父元素
      // 所以: 给父元素添加点击事件的监听, 帮子元素完成点击操作

      options.onclick = function (e) {
        // target: 最初触发事件的元素
        // 点空白位置: 会触发父元素自身的点击事件, 所以此处应该判断: 是按钮再做事
        console.log(e.target)
        console.dir(e.target) // 展开查看 哪个属性代表是按钮??
        // tagName: 代表标签名,  如果标签名是 BUTTON, 则说明是按钮元素触发的事件
        if (e.target.tagName == 'BUTTON') {
          const name = e.target.innerHTML
          console.log(name)
          const b = document.querySelector('b')
          b.innerHTML = name
        }
      }
    </script>

    <script>
      // // 1. 查询出所有的按钮
      // const btns = document.querySelectorAll('button')
      // // 2. 遍历为每个按钮添加点击事件
      // btns.forEach(value => {
      //   value.onclick = function () {
      //     // 3. 点击触发后, 读取按钮上的文本
      //     const name = this.innerHTML
      //     console.log(name)
      //     // 4. 查找到 b 标签
      //     const b = document.querySelector('b')
      //     // 5. 把按钮上的文本 赋值给 b标签的文本内容
      //     b.innerHTML = name
      //   }
      // })
    </script>
  </body>
</html>

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>冒泡练习</title>
    <style>
      #pages {
        user-select: none;
      }
      #pages > span {
        display: inline-block;
        width: 30px;
        line-height: 30px;
        text-align: center;
        border: 1px solid gray;
      }
      #pages > span.cur {
        background-color: orange;
      }
    </style>
  </head>
  <body>
    <div id="pages">
      <span class="cur">1</span>
      <span>2</span>
      <span>3</span>
      <span>4</span>
    </div>

    <script>
      // 1. 找到 id='pages' 的元素
      const pages = document.getElementById('pages')
      // 2. 添加点击事件:   委托操作 -- 监听子元素的点击
      pages.onclick = function (e) {
        // 3. 判断 target, 触发事件的元素 是 span 标签, 才做事
        if (e.target.tagName == 'SPAN') {
          // 4. 找到之前 .cur 样式的元素, 去掉 cur 样式
          document.querySelector('.cur').classList.remove('cur')
          // 5. 为当前触发事件的元素添加 cur 样式
          e.target.classList.add('cur')
        }
      }
    </script>
  </body>
</html>
