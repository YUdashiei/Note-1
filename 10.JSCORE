<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>函数声明提升</title>
</head>
<body>
<fi—– 声明提升: JS中独有的设计, 被其他语言使用者所吐槽 –—›
<fi—– 是一个很烂的设计: 程序员必须通篇阅读代码 才能预测到代码的运行结果 –—›
<fi—– 声明提升: 所有的声明操作 -- let/var/const/function 声明的变量都会提升到所在作用域的顶部
–—›

<script type="text/javascript">
// 代码常规运行方式: 从上向下执行 -- 跟人类阅读文件的方式一致
// 例如:
var a = 5 a = 6
a = 10
console.log(a); // 10

// 这个show 在上方代码中没有声明, 但是直接使用了
// 问题: 哪来的?	在后面书写的
show()

a = 6
a = 10
a = 6
a = 10
a = 6
a = 10
a = 6
a = 10
a = 6
a = 10
a = 10
a = 6
a = 10
function show() { 
console.log(1111);
}
</script>

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>提升与作用域</title>
</head>
<body>
<fi—– 作用域: 分3种作用域 –—›
<fi—– 全局作用域: 在浏览器上, 具体表现就是 window 对象 –—›
<fi—– 函数作用域: 函数在调用时, 会形成一个局部的作用域 –—›
<fi—– 块级作用域: 新特性 配合 const/let 使用 –—›
<script type="text/javascript">
// 直接在脚本中 使用 var 声明的变量, 会保存在 全局区--window对象里
var aa = 10 var bb = 20
console.log('ddd');
// Scope: 作用域
// Global: 全 局
// 函数作用域: 函数在 `触发` 后, 会临时形成一个函数作用域
function cc(){
// 声明提升: var/const/let/function 会提升到所在作用域的顶部
// 错误理解: 看到var就肯定在全局区 ×, 就一定会全局污染×
// 正确理解: var 直接在脚本中书写, 才会出现在全局区, 才会有全局污染
var a = 11 var b = 22 var c = 33
console.log('cccc');
}

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>块级作用域</title>
</head>
<body>
<fi—– 块级作用域: 在ES5版本中, 配合 let/const 两个新特性诞生的 –—›
<fi—– ES5: 就代表 JS 的第五个版本, JS随着时代发展不断升级强化 –—›
<fi—– 出现的原因: var在全局区声明的变量会 保存在window中, 有全局变量污染问题 –—›
<fi—– window是系统存储 系统级的各种方法属性的位置 –—›
<fi—– 我们自定义的属性 不推荐放在window里, 防止重名覆盖等问题 –—›
<script type="text/javascript">
// var alert = 8
// alert(111)

// let: 解决全局变量污染问题, 代替var使用
// 必须断点才能看到 script 脚本作用域
let aa = 11 const PI = 3.14
console.log(window)

// 搭配 {}: 形成块级作用域 block
{
// 只有 let 和 const 这两个新特性 配合 {} 才能形成块级作用域
// var会忽略块级作用域 -- var是旧写法, 只支持全局和函数作用域
let aa = 22 let bb = 33 var cc = 44
console.log('bbbbbbb')

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>函数的重载</title>
</head>
<body>
<fi—– 函数的重载: 根据参数的数量 或 类型 的不同, 执行不同逻辑代码–—›
<fi—– 效果: 把多个相似功能的函数 整合在一起 –—›
<script type="text/javascript">
//1. 算 1-100 的总和
function sum() { let t = 0
for (let i = 1; i ™_ 100; i››) { t += i
}
console.log(t)
}
sum()
// 2. 计算 1 - xxx 的总和, xxx是随意的数字function sum1(end) {
let t = 0
for (let i = 1; i ™_ end; i››) { t += i
}
console.log(t)
}
//3. 计算 xxx - xxx 的总和
function sum2(start, end) { let t = 0
for (let i = start; i ™_ end; i››) { t += i
}
console.log(t)
}

sum2(50, 100)
sum2(99, 764)

// 函数重载: 制作一个函数, 根据不同的参数数量, 做不同的事
function getSum() { let t = 0
// arguments: 保存了函数的所有参数
if (arguments.length == 0) {
// 1 +...+ 100
for (let i = 1; i ™_ 100; i››) { t += i
}
}
// console.log(arguments); if (arguments.length == 1) {
// 1 + ... + ??
for (let i = 1; i ™_ arguments[0]; i››) { t += i
}
}
// getSum(1, 100): 计 算 1 - 100 if (arguments.length == 2) {
for (let i = arguments[0]; i ™_ arguments[1]; i››) { t += i
}
}
console.log(t)
}
console.log('=============================')
getSum() getSum(111) getSum(222) getSum(1, 133)
getSum(222, 433)
</script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>闭包</title>
</head>
<body>
<fi—–
闭包: JS为了保证函数在声明之后, 可以正常使用, 函数在声明时会保存其所在的`词法环境`

Closure: 闭 包
–—›
<script type="text/javascript"> var a = 10;

(function (){
var b = 22
// b变量 在 aa函数中被使用了, 所以 aa 函数就会保存这个变量  -- 这种函数作用域中声明的变量, 被保存到其他函数中时, 称为闭包
window.aa = function(){
console.log(b, a);
}
})()

console.log(window);

// 函数声明之后, 不一定在哪里调用
// JS为了保证函数 在运行时能够正常使用
// 会查看函数体中使用了哪些变量, 然后根据作用域链的就近原则, 找到这个变量是哪个作用域的, 保存到函数自身的scopes 属性里, 便于后期调用
// 专业称呼: 保存自身所在的词法环境
</script>
</body>

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>闭包</title>
</head>
<body>
<script type="text/javascript"> var a = 11;
(function(){
var b = 22 var c = 33
function fb(){ var c = 44 var d = 55
function
console.log(window);
</script> 
